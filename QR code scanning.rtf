{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 fTo scan a QR code using Python, you can use the `\ul opencv\ulnone ` and `\ul pyzbar\ulnone ` libraries. Here's a full Python code that uses these libraries to scan QR codes from a live video feed (camera) or from an image.\

\f1\b0 \
You can use the following libraries:\
1. `opencv` for capturing video from the camera.\
2. `pyzbar` for decoding QR codes.\
\
\
\'93python Start from here\'94\
\
# Import necessary libraries\
import cv2\
from pyzbar.pyzbar import decode\
\
# Function to decode the QR code from a frame\
def decode_qr(frame):\
    # Decode the QR codes in the frame\
    qr_codes = decode(frame)\
    \
    for qr_code in qr_codes:\
        # Extract the coordinates for drawing a rectangle around the QR code\
        points = qr_code.polygon\
        if len(points) == 4:\
            points = [(point.x, point.y) for point in points]\
            cv2.polylines(frame, [np.array(points)], isClosed=True, color=(0, 255, 0), thickness=2)\
        \
        # Extract and print the data in the QR code\
        qr_data = qr_code.data.decode('utf-8')\
        print(f"QR Code Data: \{qr_data\}")\
\
        # Display the QR code data on the frame\
        cv2.putText(frame, qr_data, (points[0][0], points[0][1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)\
    \
    return frame\
\
# Initialize the webcam\
cap = cv2.VideoCapture(0)\
\
# Loop to capture frames continuously\
while True:\
    # Capture frame-by-frame\
    ret, frame = cap.read()\
    \
    # Check if the frame was successfully captured\
    if not ret:\
        print("Failed to capture image")\
        break\
\
    # Call the QR code decoding function\
    frame = decode_qr(frame)\
    \
    # Display the resulting frame\
    cv2.imshow('QR Code Scanner', frame)\
    \
    # Break the loop if 'q' is pressed\
    if cv2.waitKey(1) & 0xFF == ord('q'):\
        break\
\
# Release the webcam and close windows\
cap.release()\
cv2.destroyAllWindows()\
```\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ri-16366\pardirnatural\partightenfactor0
\cf0 ___________________________________________________________________________________________________________________________________________________________________\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 How It Works\
\
\ulnone 1. Capture Video Feed: This code uses OpenCV (`cv2`) to access your computer's camera.\
2. Decode QR Code: The `pyzbar` library decodes any QR code detected in the video feed.\
3. Draw Rectangle and Display Data: A rectangle is drawn around the QR code, and the data inside the QR code is displayed both on the console and on the video frame.\
4. Exit Condition: The program continues to capture video until you press the 'q' key to exit.\
\
Required Libraries:\
To run the code, you need to install the following libraries:\
\
pip install opencv-python\
pip install pyzbar\
}